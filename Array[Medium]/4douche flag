
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
let douchefLAG = (nums) => {
  let i = 0;
  let j = 0;
  let k = nums.length-1
  while (j <= k)
  {
    if (nums[j] == 0)
    {
      [nums[i], nums[j]] = [nums[j], nums[i]]
      i++
      j++
    }
    else if (nums[j] == 1)
    {
      j++
    }
    else if (nums[j] == 2)
    {
      [nums[j], nums[k]] = [nums[k], nums[j]]
   
      k--
      }
  }
  return nums
}
console.log(douchefLAG([0, 1, 2, 0, 1, 2]));
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
let douchefLAG = (nums) => {
  let result = []
  let i = 0
  while (i <= 2)
  {
    for (num of nums)
    {
      console.log(i);
      if (num == i)
        result.push(i)
    }
  i++
  }
  
  return result
}
console.log(douchefLAG([0, 1, 2, 0, 1, 2]));

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
let douchefLAG = (nums) => {
  let result = []

  let map = new Map()
  for (num of nums)
  {
    map.set(num,map.get(num)+1 || 1)
  }
  console.log(map);
  for (let [key, value] of map) {
    for (i = 1; i <= value; i++)
    {
      result.push(key)
      }
  }
  return result
}
console.log(douchefLAG([0, 1, 2, 0, 1, 2]));
